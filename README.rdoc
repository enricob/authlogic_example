= LDAP-based Role-Based Access Control with ActiveLdap and declarative_authorization

This branch extends the {with-activeldap}[http://github.com/enricob/authlogic_example/tree/with-activeldap] branch to
implement role-based access control where the user's roles are determined by the LDAP groups they belong to.

Most of the views now work; they serve as a demonstration of how access to the controller actions can be restricted based
on LDAP group membership. Users in the "super_admin" group can view and edit the accounts of all users and users with no
roles can view all accounts but only edit their own.

== Notes
   
1. A particular LDAP schema is assumed, which is as below:

      dc=example,dc=com (domain)
        dc=dev (domain, differs by environment)
          o=users (organization)
            uid=user1 (inetOrgPerson)
            uid=user2 (inetOrgPerson)
            ou=groups
              cn=super_admin (groupOfNames)
 
2. I will soon be writing a blog post which fully explains how <tt>LdapUser</tt> and <tt>LdapGroup</tt> are associated with each other. For now, refer to the {ActiveLdap documentation}[http://ruby-activeldap.rubyforge.org/doc/].

For more information on the app itself please see the {master branch}[http://github.com/enricob/authlogic_example/tree/master]